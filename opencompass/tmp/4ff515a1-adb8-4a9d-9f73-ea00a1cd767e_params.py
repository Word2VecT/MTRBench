datasets = [
    [
        dict(
            abbr='funny_QA_5times_long_1',
            eval_cfg=dict(
                evaluator=dict(
                    k=5, type='opencompass.datasets.MATHPassKEvaluator'),
                pred_postprocessor=dict(
                    type='opencompass.datasets.math_postprocess_v2')),
            infer_cfg=dict(
                inferencer=dict(
                    max_out_len=32768,
                    temperature=0.0,
                    type='opencompass.openicl.icl_inferencer.GenInferencer'),
                prompt_template=dict(
                    template=dict(round=[
                        dict(
                            prompt=
                            '你正在进行一场密室逃脱游戏，你需要利用线索，解开眼前的谜题，你必须给出唯一的确定答案。\n\n谜题：\n{task}\n\n线索：\n{clues}\n{choices}\n让我们一步一步思考，并将最终答案放在 \\boxed{{}} 中。',
                            role='HUMAN'),
                    ]),
                    type=
                    'opencompass.openicl.icl_prompt_template.PromptTemplate'),
                retriever=dict(
                    type='opencompass.openicl.icl_retriever.ZeroRetriever')),
            num_repeats=5,
            path='/mnt/petrelfs/tangzinan/COLM2025/dataset/LLM/CH/CH_QA.json',
            reader_cfg=dict(
                input_columns=[
                    'task',
                    'clues',
                    'choices',
                ],
                output_column='answer',
                test_range='[125:250]'),
            type='opencompass.datasets.FunnyDatasetV2'),
        dict(
            abbr='funny_QA_5times_long_1',
            eval_cfg=dict(
                evaluator=dict(
                    k=5, type='opencompass.datasets.MATHPassKEvaluator'),
                pred_postprocessor=dict(
                    type='opencompass.datasets.math_postprocess_v2')),
            infer_cfg=dict(
                inferencer=dict(
                    max_out_len=32768,
                    temperature=0.6,
                    top_p=0.95,
                    type='opencompass.openicl.icl_inferencer.GenInferencer'),
                prompt_template=dict(
                    template=dict(round=[
                        dict(
                            prompt=
                            '你正在进行一场密室逃脱游戏，你需要利用线索，解开眼前的谜题，你必须给出唯一的确定答案。\n\n谜题：\n{task}\n\n线索：\n{clues}\n{choices}\n让我们一步一步思考，并将最终答案放在 \\boxed{{}} 中。',
                            role='HUMAN'),
                    ]),
                    type=
                    'opencompass.openicl.icl_prompt_template.PromptTemplate'),
                retriever=dict(
                    type='opencompass.openicl.icl_retriever.ZeroRetriever')),
            num_repeats=5,
            path='/mnt/petrelfs/tangzinan/COLM2025/dataset/LLM/CH/CH_QA.json',
            reader_cfg=dict(
                input_columns=[
                    'task',
                    'clues',
                    'choices',
                ],
                output_column='answer',
                test_range='[125:250]'),
            type='opencompass.datasets.FunnyDatasetV2'),
        dict(
            abbr='funny_en_QA_5times_1',
            eval_cfg=dict(
                evaluator=dict(
                    k=5, type='opencompass.datasets.MATHPassKEvaluator'),
                pred_postprocessor=dict(
                    type='opencompass.datasets.math_postprocess_v2')),
            infer_cfg=dict(
                inferencer=dict(
                    max_out_len=32768,
                    temperature=0.0,
                    type='opencompass.openicl.icl_inferencer.GenInferencer'),
                prompt_template=dict(
                    template=dict(round=[
                        dict(
                            prompt=
                            "You are playing an escape room puzzle game, and you need to use clues to solve the puzzle in front of you. You must provide a single, definitive answer.\n\nPuzzle:\n{task}\n\nClues:\n{clues}\nLet's think step by step and put the final answer in \\boxed{{}}. Like this: \\boxed{{THE ANSWER}}.",
                            role='HUMAN'),
                    ]),
                    type=
                    'opencompass.openicl.icl_prompt_template.PromptTemplate'),
                retriever=dict(
                    type='opencompass.openicl.icl_retriever.ZeroRetriever')),
            num_repeats=5,
            path='/mnt/petrelfs/tangzinan/COLM2025/dataset/LLM/EN/EN_QA.json',
            reader_cfg=dict(
                input_columns=[
                    'task',
                    'clues',
                ],
                output_column='answer',
                test_range='[143:286]'),
            type='opencompass.datasets.FunnyDatasetV2'),
        dict(
            abbr='funny_en_QA_5times_1',
            eval_cfg=dict(
                evaluator=dict(
                    k=5, type='opencompass.datasets.MATHPassKEvaluator'),
                pred_postprocessor=dict(
                    type='opencompass.datasets.math_postprocess_v2')),
            infer_cfg=dict(
                inferencer=dict(
                    max_out_len=32768,
                    temperature=0.6,
                    top_p=0.95,
                    type='opencompass.openicl.icl_inferencer.GenInferencer'),
                prompt_template=dict(
                    template=dict(round=[
                        dict(
                            prompt=
                            "You are playing an escape room puzzle game, and you need to use clues to solve the puzzle in front of you. You must provide a single, definitive answer.\n\nPuzzle:\n{task}\n\nClues:\n{clues}\nLet's think step by step and put the final answer in \\boxed{{}}. Like this: \\boxed{{THE ANSWER}}.",
                            role='HUMAN'),
                    ]),
                    type=
                    'opencompass.openicl.icl_prompt_template.PromptTemplate'),
                retriever=dict(
                    type='opencompass.openicl.icl_retriever.ZeroRetriever')),
            num_repeats=5,
            path='/mnt/petrelfs/tangzinan/COLM2025/dataset/LLM/EN/EN_QA.json',
            reader_cfg=dict(
                input_columns=[
                    'task',
                    'clues',
                ],
                output_column='answer',
                test_range='[143:286]'),
            type='opencompass.datasets.FunnyDatasetV2'),
    ],
]
models = [
    dict(
        abbr='QVQ-72B-Preview-vllm',
        batch_size=16,
        max_out_len=4096,
        max_seq_len=None,
        model_kwargs=dict(max_model_len=None, tensor_parallel_size=4),
        path='Qwen/QVQ-72B-Preview',
        run_cfg=dict(num_gpus=4),
        stop_words=[],
        type='opencompass.models.vllm_with_tf_above_v4_33.VLLMwithChatTemplate'
    ),
]
work_dir = 'outputs/default/20250515_115113'
